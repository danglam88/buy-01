version: '3.8'
services:

  user-microservice:
    image: 142.93.175.42:8083/user-microservice:latest
    container_name: user-microservice-container
    ports:
      - "8443:8443"
    networks:
      - buy01-network
    depends_on:
      - kafka
      - user-mongodb
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/actuator/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  product-microservice:
    image: 142.93.175.42:8083/product-microservice:latest
    container_name: product-microservice-container
    ports:
      - "8444:8444"
    networks:
      - buy01-network
    depends_on:
      - kafka
      - product-mongodb
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8444/actuator/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  media-microservice:
    image: 142.93.175.42:8083/media-microservice:latest
    container_name: media-microservice-container
    ports:
      - "8445:8445"
    networks:
      - buy01-network
    depends_on:
      - kafka
      - media-mongodb
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8445/actuator/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  order-microservice:
    image: 142.93.175.42:8083/order-microservice:latest
    container_name: order-microservice-container
    ports:
      - "8446:8446"
    networks:
      - buy01-network
    depends_on:
      - kafka
      - order-mongodb
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8446/actuator/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  frontend:
    image: 142.93.175.42:8083/frontend:latest
    container_name: frontend-container
    ports:
      - "4200:4200"
    networks:
      - buy01-network
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:4200"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  user-mongodb:
    image: mongo:latest
    container_name: user-mongodb-container
    ports:
      - "27018:27017"
    networks:
      - buy01-network
    volumes:
      - user-mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${USER_DB_CREDENTIALS_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${USER_DB_CREDENTIALS_PASSWORD}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  product-mongodb:
    image: mongo:latest
    container_name: product-mongodb-container
    ports:
      - "27019:27017"
    networks:
      - buy01-network
    volumes:
      - product-mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${PRODUCT_DB_CREDENTIALS_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${PRODUCT_DB_CREDENTIALS_PASSWORD}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  media-mongodb:
    image: mongo:latest
    container_name: media-mongodb-container
    ports:
      - "27020:27017"
    networks:
      - buy01-network
    volumes:
      - media-mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MEDIA_DB_CREDENTIALS_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MEDIA_DB_CREDENTIALS_PASSWORD}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  order-mongodb:
    image: mongo:latest
    container_name: order-mongodb-container
    ports:
      - "27021:27017"
    networks:
      - buy01-network
    volumes:
      - order-mongo-volume:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${ORDER_DB_CREDENTIALS_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${ORDER_DB_CREDENTIALS_PASSWORD}
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-container
    ports:
      - "9092:9092"
    networks:
      - buy01-network
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: '10000000'
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-container
    ports:
      - "2181:2181"
    networks:
      - buy01-network
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure

volumes:
  user-mongo-volume:
    external: true
  product-mongo-volume:
    external: true
  media-mongo-volume:
    external: true
  order-mongo-volume:
    external: true

networks:
  buy01-network:
    driver: bridge
